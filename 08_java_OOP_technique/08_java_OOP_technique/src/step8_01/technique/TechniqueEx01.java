package step8_01.technique;

public class TechniqueEx01 {
	
	public static void main(String[] args) {
		
		/*
		  
			  # 객체 지향 프로그래밍 ( Object Oriented Programming[OOP] )
			  
				- 코드의 재사용성이 높다.
				- 코드의 확장성이 높다.
			    - 코드의 관리가 용이하다.
				- 개발자간에 프로그램 방법에 통일과 일치성을 준다.
				- 신뢰성이 높은 프로그래밍을 가능하게 한다.
		
	
			  # 객체 지향 5대 원칙(SOLID)
	
				1. 단일 책임 원칙(S)
				
				 - 작성된 Class는 하나의 기능만 가지며 Class가 제공하는 모든 서비스는 하나의 책임을 수행하는 데 집중되어야 한다는 원칙
		
		
				2. 개방/폐쇄 원칙(O)
				
				 - 클래스, 모듈 함수 등의 소프트웨어 개체는 확장에 대해 열려있어야 하고, 수정에 대해서는 닫혀 있어야 한다는 프로그래밍 원칙
				 - 수정이 일어나더라도 기존의 구성요소에서는 수정이 일어나지 않아야 하며, 쉽게 확장이 가능하여 재사용을 할 수 있도록 해야한다는 의미
	
	
				3. 리스코프 치환 원칙(L)
				
				 - 리스코프 치환 코드는 상속에 대한 개념  
				 - '위키백과 : 자료형 S가 자료형 T의 하위형이라면 필요한 프로그램의 속성의 변경없이 자료형 T의 객체를 자료형 S의 객체로 교체(치환) 할 수 있어야 한다.’	
		
		
				4. 인터페이스 분리 원칙(I)
				
				 - 클라이언트는 자신이 사용하지 않는 메소드에 의존 관계를 맺으면 안된다라는 원칙 					
				 - 이 법칙에서의 핵심 과제는 큰 덩어리의 인터페이스들을 구체적이고 작은 단위들로 분리시킴으로써 꼭 필요한 메서드들만 이용할 수 있게 한다이다. 
				   이러한 원칙을 준수하면서 기대할 효과로는 시스템의 내부 의존성 관계를 느슨하게 하여 리팩토링, 수정, 재배포를 쉽게 할 수 있도록 한다.
		
		
				5. 의존성 역전 원칙(D)
				
				- 상위 모듈은 하위 모듈에 종속되어서는 안된다. 
				- '위키백과 : OOP에서의 의존 관계 역전 원칙은 소프트웨어 모듈들을 분리하는 특정 형식을 지칭'
		
		 */
		
	}
	
}
